s

public class pdfExtraction {  
    public static final String DEFAULT_ENCODING = "UTF-8";  
    public void geText(String file) throws Exception {  
        boolean sort = false;  // don't need to sort
        String pdfFile = file;  	//input file
        String textFile = null;  	//ouput file
        String encoding = "UTF-8";
        int startPage = 1;   //starting page for extraction
        int endPage = Integer.MAX_VALUE;  	//ending page of the extraction
        Writer output = null;  
        PDDocument document = null;  
        BufferedReader str = 
        try {  
        	try {  
            	URL url = new URL(pdfFile);  	//first read the file by URL, if exception happens, then go to the local disk
                document = PDDocument.load(url);  // read the PDFfile using the PDDocument class in pdfbox
                String fileName = url.getFile();  
                // transform the file format from .pdf to .txt maintaining the same file name
                if (fileName.length() > 4) {  
                    File outputFile = new File(fileName.substring(0,  fileName.length() - 4)  + ".txt");   
                    textFile = outputFile.getName();  
                }  
            } catch (MalformedURLException e) {  
                // if exception does happen, read the file from local file system
                document = PDDocument.load(pdfFile);  
                if (pdfFile.length() > 4) {  
                    textFile = pdfFile.substring(0, pdfFile.length() - 4)  + ".txt";  
                }  
            }  
        	
        	String year = null;
        	BufferedReader str = null;
        	str = new BufferedReader(file);u
        	
        	
        	//Write the extracted paragraph to textfile
            output = new OutputStreamWriter(new FileOutputStream(textFile),  encoding);  
            // Use PDFTextStripper to extract content
            PDFTextStripper stripper = null;  
            stripper = new PDFTextStripper();  
            // set if we want to sort 
            stripper.setSortByPosition(sort);  
            // set beginning page 
            stripper.setStartPage(startPage);  
            // set ending page
            stripper.setEndPage(endPage);  
            // use the writeText function in PDFTextStripper to extract and output text  
            stripper.writeText(document, output);  
        } finally {  
            if (output != null) {  
                // shut io stream
                output.close();  
            }  
            if (document != null) {  
                // close PDF Document 
                document.close();  
            }  
        }  
    }  
    public static void main(String[] args) {  
        pdfExtraction test = new pdfExtraction();  
        try {  
            test.geText("abcdef.pdf");
        ne sc
        }  
    }  
}